{
  "openapi": "3.0.0",
  "paths": {
    "/payments": {
      "post": {
        "description": "Create a new payment transaction with customer information, items, and payment method details. Supports PIX, credit card, and billet payments.",
        "operationId": "PaymentController_create",
        "parameters": [
          {
            "name": "x-api-key-public",
            "in": "header",
            "description": "Public API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key-secret",
            "in": "header",
            "description": "Secret API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payment data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to create payments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Payment with external_id already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Conflict"
                    },
                    "error": {
                      "type": "string",
                      "example": "Conflict"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create a new payment",
        "tags": [
          "Payments"
        ]
      },
      "get": {
        "description": "Retrieve a paginated list of all payments for the authenticated company. Supports pagination with page and limit parameters.",
        "operationId": "PaymentController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (default: 1)",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page (default: 20, max: 100)",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "x-api-key-public",
            "in": "header",
            "description": "Public API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key-secret",
            "in": "header",
            "description": "Secret API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of payments with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentListResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to read payments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "List all payments",
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments/{id}/refund": {
      "post": {
        "description": "Process a full refund for an approved payment. The payment must be in APPROVED status and within the refund window.",
        "operationId": "PaymentController_refund",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Payment ID to refund",
            "schema": {
              "example": "pay_cm3x7n8f70000vs6g5jkg5hkn",
              "type": "string"
            }
          },
          {
            "name": "x-api-key-public",
            "in": "header",
            "description": "Public API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key-secret",
            "in": "header",
            "description": "Secret API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment refunded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Payment cannot be refunded (invalid status or expired)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to refund payments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Payment not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Payment not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Refund a payment",
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments/search/{value}": {
      "get": {
        "description": "Search for a specific payment using different identifiers: payment ID, external ID, or end-to-end ID. Useful for payment reconciliation and lookup.",
        "operationId": "PaymentController_findUnique",
        "parameters": [
          {
            "name": "value",
            "required": true,
            "in": "path",
            "description": "Value to search (ID, External ID, or End-to-End ID)",
            "schema": {
              "example": "pay_cm3x7n8f70000vs6g5jkg5hkn",
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "Search criteria (default: id)",
            "schema": {
              "enum": [
                "id",
                "external_id",
                "end_to_end"
              ],
              "type": "string"
            }
          },
          {
            "name": "x-api-key-public",
            "in": "header",
            "description": "Public API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key-secret",
            "in": "header",
            "description": "Secret API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid search criteria or search value format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to read payments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Payment not found with the provided criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Payment not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Find payment by different search criteria",
        "tags": [
          "Payments"
        ]
      }
    },
    "/users/profile": {
      "get": {
        "description": "Retrieve the authenticated user profile information including personal data and account status.",
        "operationId": "UserController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied to user profile",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user profile",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/documents": {
      "get": {
        "description": "Retrieve the authenticated user uploaded documents including ID photos and selfie verification.",
        "operationId": "UserController_getDocuments",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User documents retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDocumentsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied to user documents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user documents",
        "tags": [
          "Users"
        ]
      }
    },
    "/companies": {
      "post": {
        "description": "Register a new company in the system with basic information and address details.",
        "operationId": "CompanyController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompanyDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Company created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid company data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Company with this CNPJ already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Conflict"
                    },
                    "error": {
                      "type": "string",
                      "example": "Conflict"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create a new company",
        "tags": [
          "Companies"
        ]
      }
    },
    "/companies/documents": {
      "post": {
        "description": "Upload required company documents for KYC compliance including social contract, CNPJ card, and responsible person documents.",
        "operationId": "CompanyController_uploadDocuments",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Company documents and information",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "contract_social": {
                    "type": "string",
                    "format": "binary",
                    "description": "Company social contract document (PDF, JPG, PNG)"
                  },
                  "card_cnpj": {
                    "type": "string",
                    "format": "binary",
                    "description": "CNPJ registration card (PDF, JPG, PNG)"
                  },
                  "document_front_responsible": {
                    "type": "string",
                    "format": "binary",
                    "description": "Front side of responsible person ID (JPG, PNG, PDF)"
                  },
                  "document_back_responsible": {
                    "type": "string",
                    "format": "binary",
                    "description": "Back side of responsible person ID (JPG, PNG, PDF)"
                  },
                  "document_selfie_responsible": {
                    "type": "string",
                    "format": "binary",
                    "description": "Selfie photo of responsible person with ID (JPG, PNG)"
                  },
                  "mother_name_responsible": {
                    "type": "string",
                    "description": "Mother name of responsible person",
                    "example": "Maria Silva Santos"
                  },
                  "phone_responsible": {
                    "type": "string",
                    "description": "Phone number of responsible person",
                    "example": "+5511999999999"
                  },
                  "document_responsible": {
                    "type": "string",
                    "description": "CPF of responsible person (11 digits)",
                    "example": "12345678901"
                  },
                  "name_responsible": {
                    "type": "string",
                    "description": "Full name of responsible person",
                    "example": "João Silva Santos"
                  },
                  "cnae_company": {
                    "type": "string",
                    "description": "Company CNAE code",
                    "example": "6201-5/00"
                  },
                  "phone_company": {
                    "type": "string",
                    "description": "Company phone number",
                    "example": "+5511888888888"
                  },
                  "website_company": {
                    "type": "string",
                    "description": "Company website (optional)",
                    "example": "https://www.company.com"
                  },
                  "created_company_date": {
                    "type": "string",
                    "format": "date",
                    "description": "Company creation date (YYYY-MM-DD)",
                    "example": "2020-01-15"
                  },
                  "average_ticket": {
                    "type": "number",
                    "description": "Average transaction value (optional)",
                    "example": 150.5
                  },
                  "monthly_revenue": {
                    "type": "number",
                    "description": "Monthly revenue estimate (optional)",
                    "example": 50000
                  }
                },
                "required": [
                  "contract_social",
                  "card_cnpj",
                  "document_front_responsible",
                  "document_back_responsible",
                  "document_selfie_responsible",
                  "mother_name_responsible",
                  "phone_responsible",
                  "document_responsible",
                  "name_responsible",
                  "cnae_company",
                  "phone_company",
                  "created_company_date"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Documents uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentUploadResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Missing required documents or invalid file format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "File size exceeds limit (max 5MB per file)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 413
                    },
                    "message": {
                      "type": "string",
                      "example": "File too large"
                    },
                    "error": {
                      "type": "string",
                      "example": "Payload Too Large"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Upload company documents",
        "tags": [
          "Companies"
        ]
      }
    },
    "/companies/tax-config": {
      "get": {
        "description": "Retrieve tax configuration for a specific currency or all currencies if no currency is specified.",
        "operationId": "CompanyController_getTaxConfig",
        "parameters": [
          {
            "name": "currency",
            "required": false,
            "in": "query",
            "description": "Currency filter for tax configuration",
            "schema": {
              "enum": [
                "BRL",
                "USD",
                "EUR"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tax configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TaxConfigResponseDto"
                    },
                    {
                      "$ref": "#/components/schemas/TaxConfigsResponseDto"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid currency parameter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Get company tax configuration",
        "tags": [
          "Companies"
        ]
      },
      "put": {
        "description": "Update existing tax configuration for a specific currency with new rates, fees, and settings.",
        "operationId": "CompanyController_updateTaxConfig",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyTaxConfigDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tax configuration updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxConfigUpdateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid tax configuration data or currency not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Update company tax configuration",
        "tags": [
          "Companies"
        ]
      },
      "post": {
        "description": "Create a new tax configuration for a specific currency with rates, fees, and payment settings.",
        "operationId": "CompanyController_createTaxConfig",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyTaxConfigDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tax configuration created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxConfigCreateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid tax configuration data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Tax configuration for this currency already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Conflict"
                    },
                    "error": {
                      "type": "string",
                      "example": "Conflict"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Create company tax configuration",
        "tags": [
          "Companies"
        ]
      }
    },
    "/companies/config": {
      "get": {
        "description": "Retrieve current company configuration settings including payment methods and feature flags.",
        "operationId": "CompanyController_getConfig",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Company configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyConfigResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Get company configuration",
        "tags": [
          "Companies"
        ]
      },
      "put": {
        "description": "Update company configuration settings for payment methods and features.",
        "operationId": "CompanyController_updateConfig",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyConfigDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Company configuration updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyConfigUpdateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid configuration data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Update company configuration",
        "tags": [
          "Companies"
        ]
      },
      "post": {
        "description": "Create initial company configuration with payment methods and feature settings.",
        "operationId": "CompanyController_createConfig",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyConfigDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Company configuration created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyConfigCreateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid configuration data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Company configuration already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Conflict"
                    },
                    "error": {
                      "type": "string",
                      "example": "Conflict"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Create company configuration",
        "tags": [
          "Companies"
        ]
      }
    },
    "/companies/status": {
      "get": {
        "description": "Retrieve current company status and verification information.",
        "operationId": "CompanyController_getStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Company status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyStatusResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Get company status",
        "tags": [
          "Companies"
        ]
      }
    },
    "/companies/balances": {
      "get": {
        "description": "Retrieve company wallet balances for all account types or a specific currency.",
        "operationId": "CompanyController_getBalances",
        "parameters": [
          {
            "name": "currency",
            "required": false,
            "in": "query",
            "description": "Currency filter for balances",
            "schema": {
              "enum": [
                "BRL",
                "USD",
                "EUR"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company balances retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyBalancesResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid currency parameter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "No permission to read balances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Get company balances",
        "tags": [
          "Companies"
        ]
      }
    },
    "/companies/wallets/{accountType}": {
      "get": {
        "description": "Retrieve company wallets filtered by account type (AVAILABLE, PENDING, RESERVED).",
        "operationId": "CompanyController_getWalletsByAccountType",
        "parameters": [
          {
            "name": "accountType",
            "required": true,
            "in": "path",
            "description": "Account type to filter wallets",
            "schema": {
              "enum": [
                "AVAILABLE",
                "PENDING",
                "RESERVED"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Wallets retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid account type parameter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Get wallets by account type",
        "tags": [
          "Companies"
        ]
      }
    },
    "/api-keys/companies/{companyId}": {
      "post": {
        "description": "Create a new API key pair (public and secret) for a company with specified permissions. Requires user authentication and company access.",
        "operationId": "ApiKeysController_create",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company identifier",
            "schema": {
              "example": "comp_1234567890",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApiKeyDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "API key created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid company ID or API key data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "No permission to create API keys for this company",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create API key for company",
        "tags": [
          "API Keys"
        ]
      },
      "get": {
        "description": "Retrieve all API keys for a specific company. Secret keys are masked for security.",
        "operationId": "ApiKeysController_findAll",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company identifier",
            "schema": {
              "example": "comp_1234567890",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of API keys for the company",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKeyListItemDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid company ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "No permission to view API keys for this company",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "List company API keys",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/api-keys/companies/{companyId}/{apiKeyId}": {
      "get": {
        "description": "Retrieve details of a specific API key. Secret key is masked for security.",
        "operationId": "ApiKeysController_findOne",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company identifier",
            "schema": {
              "example": "comp_1234567890",
              "type": "string"
            }
          },
          {
            "name": "apiKeyId",
            "required": true,
            "in": "path",
            "description": "API key identifier",
            "schema": {
              "example": "key_1234567890",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API key details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid company ID or API key ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "No permission to view this API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get specific API key details",
        "tags": [
          "API Keys"
        ]
      },
      "put": {
        "description": "Update API key description and permissions. Cannot modify the key values themselves.",
        "operationId": "ApiKeysController_update",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company identifier",
            "schema": {
              "example": "comp_1234567890",
              "type": "string"
            }
          },
          {
            "name": "apiKeyId",
            "required": true,
            "in": "path",
            "description": "API key identifier",
            "schema": {
              "example": "key_1234567890",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApiKeyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "API key updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyUpdateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid company ID, API key ID, or update data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "No permission to update this API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update API key",
        "tags": [
          "API Keys"
        ]
      },
      "delete": {
        "description": "Permanently delete an API key. This action cannot be undone and will immediately invalidate the key.",
        "operationId": "ApiKeysController_delete",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company identifier",
            "schema": {
              "example": "comp_1234567890",
              "type": "string"
            }
          },
          {
            "name": "apiKeyId",
            "required": true,
            "in": "path",
            "description": "API key identifier",
            "schema": {
              "example": "key_1234567890",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "API key deleted successfully"
          },
          "400": {
            "description": "Invalid company ID or API key ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "No permission to delete this API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Delete API key",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/api-keys/validate": {
      "post": {
        "description": "Validate if a public and secret key pair is valid and active. Returns key details and permissions.",
        "operationId": "ApiKeysController_validate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateApiKeyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "API key validation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyValidationDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid API key format or missing keys",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Validate API key pair",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/api-keys/companies/{companyId}/{apiKeyId}/regenerate": {
      "post": {
        "description": "Generate new public and secret keys for an existing API key. The old keys will be immediately invalidated.",
        "operationId": "ApiKeysController_regenerate",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company identifier",
            "schema": {
              "example": "comp_1234567890",
              "type": "string"
            }
          },
          {
            "name": "apiKeyId",
            "required": true,
            "in": "path",
            "description": "API key identifier",
            "schema": {
              "example": "key_1234567890",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "API key regenerated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyRegenerateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid company ID or API key ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "No permission to regenerate this API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Regenerate API key pair",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/api-keys/validate-headers": {
      "post": {
        "description": "Validate API keys provided in request headers (x-api-key-public and x-api-key-secret).",
        "operationId": "ApiKeysController_validateHeaders",
        "parameters": [
          {
            "name": "x-api-key-public",
            "required": true,
            "in": "header",
            "description": "Public API key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key-secret",
            "required": true,
            "in": "header",
            "description": "Secret API key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API key validation result from headers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyValidationDto"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid API keys in headers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Validate API keys from headers",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/providers": {
      "post": {
        "description": "Create a new payment provider with configuration details. This endpoint is restricted to admin users.",
        "operationId": "ProviderController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProviderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Provider created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid provider data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Admin authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient admin permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create a new provider",
        "tags": [
          "Providers"
        ]
      },
      "get": {
        "description": "Retrieve a list of all payment providers in the system. Admin access required.",
        "operationId": "ProviderController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProviderResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Admin authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient admin permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "List all providers",
        "tags": [
          "Providers"
        ]
      }
    },
    "/providers/{id}": {
      "get": {
        "description": "Retrieve detailed information about a specific provider by its ID.",
        "operationId": "ProviderController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Provider ID",
            "schema": {
              "example": "prv_cm3x7n8f70000vs6g5jkg5hkn",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Provider details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Admin authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient admin permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Provider not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get provider by ID",
        "tags": [
          "Providers"
        ]
      },
      "put": {
        "description": "Update provider configuration and settings. Admin access required.",
        "operationId": "ProviderController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Provider ID",
            "schema": {
              "example": "prv_cm3x7n8f70000vs6g5jkg5hkn",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProviderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Provider updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderUpdateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid provider data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Admin authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient admin permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Provider not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update provider",
        "tags": [
          "Providers"
        ]
      },
      "delete": {
        "description": "Permanently delete a provider. This action cannot be undone and will affect all associated configurations.",
        "operationId": "ProviderController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Provider ID",
            "schema": {
              "example": "prv_cm3x7n8f70000vs6g5jkg5hkn",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Provider deleted successfully"
          },
          "400": {
            "description": "Invalid request data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Admin authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient admin permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Provider not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Delete provider",
        "tags": [
          "Providers"
        ]
      }
    },
    "/providers/{id}/tax-config": {
      "get": {
        "operationId": "ProviderController_getTaxConfig",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Providers"
        ]
      },
      "post": {
        "operationId": "ProviderController_createTaxConfig",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProviderTaxConfigDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Providers"
        ]
      },
      "put": {
        "operationId": "ProviderController_updateTaxConfig",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProviderTaxConfigDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Providers"
        ]
      }
    },
    "/providers/{providerId}/companies/{companyId}/sub-accounts": {
      "post": {
        "operationId": "ProviderController_createSubAccount",
        "parameters": [
          {
            "name": "providerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubAccountDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Providers"
        ]
      },
      "get": {
        "operationId": "ProviderController_getSubAccount",
        "parameters": [
          {
            "name": "providerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Providers"
        ]
      }
    },
    "/providers/companies/{companyId}/assign": {
      "post": {
        "operationId": "ProviderController_assignProviderToCompany",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignProviderToCompanyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Providers"
        ]
      }
    },
    "/providers/companies/{companyId}": {
      "get": {
        "operationId": "ProviderController_getProvidersByCompany",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Providers"
        ]
      }
    },
    "/receivers": {
      "post": {
        "description": "Create a new receiver for the authenticated company. Receivers are entities that can receive payments and withdrawals.",
        "operationId": "ReceiverController_create",
        "parameters": [
          {
            "name": "x-api-key-public",
            "in": "header",
            "description": "Public API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key-secret",
            "in": "header",
            "description": "Secret API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReceiverDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Receiver created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiverResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid receiver data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to create receivers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create a new receiver",
        "tags": [
          "Receivers"
        ]
      },
      "get": {
        "description": "Retrieve a paginated list of all receivers for the authenticated company with optional status filtering.",
        "operationId": "ReceiverController_findAll",
        "parameters": [
          {
            "name": "x-api-key-public",
            "in": "header",
            "description": "Public API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key-secret",
            "in": "header",
            "description": "Secret API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (default: 1)",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page (default: 20, max: 100)",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter receivers by status",
            "schema": {
              "enum": [
                "ACTIVE",
                "PENDING",
                "REJECTED"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of receivers with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiverListResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to read receivers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "List all receivers",
        "tags": [
          "Receivers"
        ]
      }
    },
    "/receivers/{id}": {
      "get": {
        "description": "Retrieve detailed information about a specific receiver by its ID.",
        "operationId": "ReceiverController_findOne",
        "parameters": [
          {
            "name": "x-api-key-public",
            "in": "header",
            "description": "Public API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key-secret",
            "in": "header",
            "description": "Secret API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Receiver ID",
            "schema": {
              "example": "rcv_cm3x7n8f70000vs6g5jkg5hkn",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Receiver details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiverDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to read receivers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Receiver not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get a receiver by ID",
        "tags": [
          "Receivers"
        ]
      },
      "delete": {
        "description": "Permanently delete a receiver. This action cannot be undone and will remove all receiver data.",
        "operationId": "ReceiverController_delete",
        "parameters": [
          {
            "name": "x-api-key-public",
            "in": "header",
            "description": "Public API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key-secret",
            "in": "header",
            "description": "Secret API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Receiver ID",
            "schema": {
              "example": "rcv_cm3x7n8f70000vs6g5jkg5hkn",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Receiver deleted successfully"
          },
          "400": {
            "description": "Invalid request data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to delete receivers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Receiver not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Delete a receiver",
        "tags": [
          "Receivers"
        ]
      }
    },
    "/receivers/{id}/status": {
      "patch": {
        "description": "Update the status of a receiver (e.g., activate, reject, or set to pending).",
        "operationId": "ReceiverController_updateStatus",
        "parameters": [
          {
            "name": "x-api-key-public",
            "in": "header",
            "description": "Public API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key-secret",
            "in": "header",
            "description": "Secret API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Receiver ID",
            "schema": {
              "example": "rcv_cm3x7n8f70000vs6g5jkg5hkn",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReceiverStatusDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Receiver status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiverStatusUpdateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status or receiver data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to update receivers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Receiver not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update receiver status",
        "tags": [
          "Receivers"
        ]
      }
    },
    "/withdrawals": {
      "post": {
        "description": "Create a new withdrawal request for the authenticated company. Requires appropriate permissions and valid receiver information.",
        "operationId": "WithdrawalController_create",
        "parameters": [
          {
            "name": "x-api-key-public",
            "in": "header",
            "description": "Public API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key-secret",
            "in": "header",
            "description": "Secret API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWithdrawalDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Withdrawal created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawalCreatedResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid withdrawal data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to create withdrawals",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create a new withdrawal",
        "tags": [
          "Withdrawals"
        ]
      },
      "get": {
        "description": "Retrieve a paginated list of all withdrawals for the authenticated company with optional filtering.",
        "operationId": "WithdrawalController_findAll",
        "parameters": [
          {
            "name": "x-api-key-public",
            "in": "header",
            "description": "Public API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key-secret",
            "in": "header",
            "description": "Secret API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (default: 1)",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page (default: 20, max: 100)",
            "schema": {
              "example": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of withdrawals with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawalListResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to read withdrawals",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "List all withdrawals",
        "tags": [
          "Withdrawals"
        ]
      }
    },
    "/withdrawals/search/{value}": {
      "get": {
        "description": "Search for a specific withdrawal using different identifiers like ID, external ID, or end-to-end ID.",
        "operationId": "WithdrawalController_findUnique",
        "parameters": [
          {
            "name": "x-api-key-public",
            "in": "header",
            "description": "Public API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key-secret",
            "in": "header",
            "description": "Secret API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "required": true,
            "in": "path",
            "description": "Value to search (ID, External ID, or End-to-End ID)",
            "schema": {
              "example": "wth_cm3x7n8f70000vs6g5jkg5hkn",
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "Search criteria (default: id)",
            "schema": {
              "enum": [
                "id",
                "external_id",
                "end_to_end"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Withdrawal details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawalDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid search parameters or criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to read withdrawals",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Withdrawal not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Find withdrawal by different search criteria",
        "tags": [
          "Withdrawals"
        ]
      }
    },
    "/anticipations/available": {
      "get": {
        "description": "Retrieve all available payment schedules that can be anticipated, grouped by type (installments or pending to available)",
        "operationId": "AnticipationController_getAvailable",
        "parameters": [
          {
            "name": "x-api-key-public",
            "in": "header",
            "description": "Public API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key-secret",
            "in": "header",
            "description": "Secret API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "required": true,
            "in": "query",
            "description": "Currency filter for available schedules",
            "schema": {
              "enum": [
                "BRL",
                "USD",
                "EUR"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Available schedules grouped by type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableSchedulesDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid currency parameter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get available schedules for anticipation",
        "tags": [
          "Anticipations"
        ]
      }
    },
    "/anticipations/simulate": {
      "post": {
        "description": "Calculate the costs and net amount for anticipating payment schedules before creating the actual anticipation",
        "operationId": "AnticipationController_simulate",
        "parameters": [
          {
            "name": "x-api-key-public",
            "in": "header",
            "description": "Public API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key-secret",
            "in": "header",
            "description": "Secret API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateAnticipationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Anticipation simulation result with calculated fees and net amounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnticipationSimulationDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid simulation parameters or no schedules available for anticipation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Simulate an anticipation",
        "tags": [
          "Anticipations"
        ]
      }
    },
    "/anticipations": {
      "post": {
        "description": "Create an anticipation request for available payment schedules. This will process the anticipation and transfer funds to the available balance.",
        "operationId": "AnticipationController_create",
        "parameters": [
          {
            "name": "x-api-key-public",
            "in": "header",
            "description": "Public API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key-secret",
            "in": "header",
            "description": "Secret API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnticipationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Anticipation created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnticipationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid anticipation data, insufficient balance, or no schedules available for anticipation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create a new anticipation",
        "tags": [
          "Anticipations"
        ]
      },
      "get": {
        "description": "Retrieve a paginated list of all anticipations for the authenticated company with optional filtering",
        "operationId": "AnticipationController_list",
        "parameters": [
          {
            "name": "x-api-key-public",
            "in": "header",
            "description": "Public API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key-secret",
            "in": "header",
            "description": "Secret API key for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by anticipation status",
            "schema": {
              "enum": [
                "PENDING",
                "APPROVED",
                "REJECTED",
                "PROCESSING",
                "COMPLETED"
              ],
              "type": "string"
            }
          },
          {
            "name": "from_date",
            "required": false,
            "in": "query",
            "description": "Filter anticipations created from this date (YYYY-MM-DD)",
            "schema": {
              "example": "2025-01-01",
              "type": "string"
            }
          },
          {
            "name": "to_date",
            "required": false,
            "in": "query",
            "description": "Filter anticipations created until this date (YYYY-MM-DD)",
            "schema": {
              "example": "2025-12-31",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (default: 1)",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page (default: 20, max: 100)",
            "schema": {
              "example": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of anticipations with pagination metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnticipationListResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters or date format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "List company anticipations",
        "tags": [
          "Anticipations"
        ]
      }
    },
    "/link-user-company/{companyId}/members/invite": {
      "post": {
        "description": "Send an invitation email to a user to join the company with specified permissions. Only company owners can send invitations.",
        "operationId": "LinkUserCompanyController_inviteUser",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "example": "cmp_cm3x7n8f70000vs6g5jkg5hkn",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteUserToCompanyDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Invitation sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InviteUserResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid invitation data or user already invited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Only company owners can invite members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "User already has access to this company",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Conflict"
                    },
                    "error": {
                      "type": "string",
                      "example": "Conflict"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Invite a user to join the company",
        "tags": [
          "Company Members"
        ]
      }
    },
    "/link-user-company/accept-invite": {
      "post": {
        "description": "Accept a pending company invitation using the invitation token received via email. The invitation must be valid and not expired.",
        "operationId": "LinkUserCompanyController_acceptInvite",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptInviteDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation accepted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcceptInviteResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired invitation token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Invitation not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Accept a company invitation",
        "tags": [
          "Company Members"
        ]
      }
    },
    "/link-user-company/{companyId}/members": {
      "get": {
        "description": "Retrieve a paginated list of all company members with their permissions and user information. Supports filtering by member type and banned status.",
        "operationId": "LinkUserCompanyController_listMembers",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "example": "cmp_cm3x7n8f70000vs6g5jkg5hkn",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (default: 1)",
            "schema": {
              "minimum": 1,
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page (default: 20, max: 100)",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by member type",
            "schema": {
              "enum": [
                "OWNED",
                "GUEST"
              ],
              "type": "string"
            }
          },
          {
            "name": "include_banned",
            "required": false,
            "in": "query",
            "description": "Include banned members (default: false)",
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of company members with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyMemberListResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "You do not have access to this company",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Company not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List company members",
        "tags": [
          "Company Members"
        ]
      }
    },
    "/link-user-company/{companyId}/members/summary": {
      "get": {
        "description": "Retrieve a summary of company access statistics including total members, owners, guests, pending invitations, and banned members.",
        "operationId": "LinkUserCompanyController_getAccessSummary",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "example": "cmp_cm3x7n8f70000vs6g5jkg5hkn",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company access summary with statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyAccessSummaryDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "You do not have access to this company",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Company not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get company access summary",
        "tags": [
          "Company Members"
        ]
      }
    },
    "/link-user-company/{companyId}/members/{userId}": {
      "patch": {
        "description": "Update the permissions of a company member. Only company owners can modify member permissions.",
        "operationId": "LinkUserCompanyController_updateMemberPermissions",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "example": "cmp_cm3x7n8f70000vs6g5jkg5hkn",
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID of the member to update",
            "schema": {
              "example": "usr_cm3x7n8f70000vs6g5jkg5hkn",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserPermissionsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Member permissions updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberActionResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid permission data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Only company owners can update member permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Member not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Member not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update member permissions",
        "tags": [
          "Company Members"
        ]
      },
      "delete": {
        "description": "Permanently remove a member from the company. Only company owners can remove members. The member will lose all access to the company.",
        "operationId": "LinkUserCompanyController_removeMember",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "example": "cmp_cm3x7n8f70000vs6g5jkg5hkn",
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID of the member to remove",
            "schema": {
              "example": "usr_cm3x7n8f70000vs6g5jkg5hkn",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Cannot remove company owner",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Only company owners can remove members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Member not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Member not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove member from company",
        "tags": [
          "Company Members"
        ]
      }
    },
    "/link-user-company/{companyId}/members/{userId}/ban": {
      "post": {
        "description": "Temporarily ban a member from the company. Banned members cannot access company resources but their access record is preserved. Only company owners can ban members.",
        "operationId": "LinkUserCompanyController_banMember",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "example": "cmp_cm3x7n8f70000vs6g5jkg5hkn",
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID of the member to ban",
            "schema": {
              "example": "usr_cm3x7n8f70000vs6g5jkg5hkn",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member banned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberActionResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Cannot ban company owner or already banned member",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Only company owners can ban members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Member not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Member not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Ban member from company",
        "tags": [
          "Company Members"
        ]
      }
    },
    "/link-user-company/{companyId}/members/{userId}/unban": {
      "post": {
        "description": "Remove the ban from a previously banned member, restoring their access to the company. Only company owners can unban members.",
        "operationId": "LinkUserCompanyController_unbanMember",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "example": "cmp_cm3x7n8f70000vs6g5jkg5hkn",
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID of the member to unban",
            "schema": {
              "example": "usr_cm3x7n8f70000vs6g5jkg5hkn",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member unbanned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberActionResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Member is not currently banned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Only company owners can unban members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Member not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Member not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Unban member from company",
        "tags": [
          "Company Members"
        ]
      }
    },
    "/link-user-company/my-companies": {
      "get": {
        "description": "Retrieve all companies that the authenticated user has access to, either as an owner or guest member.",
        "operationId": "LinkUserCompanyController_getUserCompanies",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of user companies with access details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCompanyListResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List companies the user has access to",
        "tags": [
          "Company Members"
        ]
      }
    },
    "/auth/register": {
      "post": {
        "description": "Create a new user account with email, password, and personal information",
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegistrationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Conflict"
                    },
                    "error": {
                      "type": "string",
                      "example": "Conflict"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "User registration",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "description": "Authenticate user with email and password, returns access and refresh tokens",
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials or account not verified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Account is blocked or inactive",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Resource already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Conflict"
                    },
                    "error": {
                      "type": "string",
                      "example": "Conflict"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "User login",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/refresh": {
      "post": {
        "description": "Generate new access token using valid refresh token",
        "operationId": "AuthController_refreshToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Resource already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Conflict"
                    },
                    "error": {
                      "type": "string",
                      "example": "Conflict"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Refresh access token",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/logout": {
      "post": {
        "description": "Invalidate user session and optionally revoke refresh token",
        "operationId": "AuthController_logout",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Logout user",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/me": {
      "get": {
        "description": "Retrieve authenticated user information including associated companies and permissions",
        "operationId": "AuthController_getCurrentUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Current user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedUserDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get current user info",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/change-password": {
      "post": {
        "description": "Change authenticated user password by providing current password and new password",
        "operationId": "AuthController_changePassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid current password or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Change user password",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/forgot-password": {
      "post": {
        "description": "Send password reset email to user (always returns success for security)",
        "operationId": "AuthController_forgotPassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset email sent (or email not found - returns success for security)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid email format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Resource already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Conflict"
                    },
                    "error": {
                      "type": "string",
                      "example": "Conflict"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Request password reset",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/reset-password": {
      "post": {
        "description": "Reset user password using valid reset token received via email",
        "operationId": "AuthController_resetPassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired token, or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Resource already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Conflict"
                    },
                    "error": {
                      "type": "string",
                      "example": "Conflict"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Reset password with token",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/verify-token": {
      "post": {
        "description": "Validate JWT token and return payload if valid",
        "operationId": "AuthController_verifyToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token validation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyTokenResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Resource already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Conflict"
                    },
                    "error": {
                      "type": "string",
                      "example": "Conflict"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Verify if token is valid",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/select-company": {
      "post": {
        "description": "Set the active company context for the authenticated user session",
        "operationId": "AuthController_selectCompany",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SelectCompanyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Company selected successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectCompanyResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid company ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User does not have access to this company",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Select active company for user",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/upload-documents": {
      "post": {
        "description": "Upload identity verification documents (front, back, and selfie) for KYC compliance",
        "operationId": "AuthController_uploadDocuments",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Document files for verification",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "document_front": {
                    "type": "string",
                    "format": "binary",
                    "description": "Front side of identity document (JPG, PNG, PDF)"
                  },
                  "document_back": {
                    "type": "string",
                    "format": "binary",
                    "description": "Back side of identity document (JPG, PNG, PDF)"
                  },
                  "document_selfie": {
                    "type": "string",
                    "format": "binary",
                    "description": "Selfie photo with document (JPG, PNG)"
                  }
                },
                "required": [
                  "document_front",
                  "document_back",
                  "document_selfie"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Documents uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentUploadResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Missing required documents or invalid file format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Bad Request"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "email must be a valid email",
                            "password is too weak"
                          ]
                        }
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "File too large (max 5MB per file)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 413
                    },
                    "message": {
                      "type": "string",
                      "example": "File too large"
                    },
                    "error": {
                      "type": "string",
                      "example": "Payload Too Large"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Upload user documents",
        "tags": [
          "Authentication"
        ]
      }
    }
  },
  "info": {
    "title": "Payment API",
    "description": "API Documentation for Payment System",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [
    {
      "url": "http://localhost:3001",
      "description": "Local Development"
    },
    {
      "url": "https://api.staging.example.com",
      "description": "Staging"
    },
    {
      "url": "https://api.example.com",
      "description": "Production"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      },
      "publicKey": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key-public"
      },
      "secretKey": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key-secret"
      }
    },
    "schemas": {
      "DocumentDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "CPF",
            "enum": [
              "CPF",
              "CNPJ"
            ],
            "description": "Document type"
          },
          "number": {
            "type": "string",
            "example": "07363631573",
            "description": "Unformatted document number"
          }
        },
        "required": [
          "type",
          "number"
        ]
      },
      "AddressDto": {
        "type": "object",
        "properties": {
          "zipcode": {
            "type": "string",
            "example": "49000000",
            "description": "Unformatted ZIP code"
          },
          "city": {
            "type": "string",
            "example": "Aracaju"
          },
          "state": {
            "type": "string",
            "example": "SE",
            "description": "State abbreviation"
          },
          "complement": {
            "type": "string",
            "example": "Apt 101",
            "description": "Address complement"
          },
          "street": {
            "type": "string",
            "example": "Rua das Flores"
          },
          "district": {
            "type": "string",
            "example": "Centro",
            "description": "Neighborhood"
          },
          "number": {
            "type": "string",
            "example": "123"
          },
          "country": {
            "type": "string",
            "example": "Brasil",
            "description": "Country"
          }
        },
        "required": [
          "zipcode",
          "city",
          "state",
          "street",
          "district",
          "number",
          "country"
        ]
      },
      "CustomerDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "João da Silva"
          },
          "email": {
            "type": "string",
            "example": "joao.silva@email.com"
          },
          "document": {
            "description": "Payer document (optional)",
            "allOf": [
              {
                "$ref": "#/components/schemas/DocumentDto"
              }
            ]
          },
          "phone": {
            "type": "string",
            "example": "5579999999999"
          },
          "address": {
            "description": "Customer address (optional)",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressDto"
              }
            ]
          }
        },
        "required": [
          "name",
          "email",
          "phone"
        ]
      },
      "ItemDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "T-shirt"
          },
          "quantity": {
            "type": "number",
            "example": 1
          },
          "unit_amount": {
            "type": "number",
            "example": 500,
            "description": "Unit value in cents"
          }
        },
        "required": [
          "name",
          "quantity",
          "unit_amount"
        ]
      },
      "ShippingAddressDto": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "example": "Rua das Flores"
          },
          "number": {
            "type": "string",
            "example": "123"
          },
          "complement": {
            "type": "string",
            "example": "Apt 101"
          },
          "district": {
            "type": "string",
            "example": "Centro"
          },
          "city": {
            "type": "string",
            "example": "São Paulo"
          },
          "state": {
            "type": "string",
            "example": "SP"
          },
          "country": {
            "type": "string",
            "example": "BR"
          },
          "zipcode": {
            "type": "string",
            "example": "99000000"
          }
        },
        "required": [
          "street",
          "number",
          "district",
          "city",
          "state",
          "country",
          "zipcode"
        ]
      },
      "SplitRuleDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "a300039d-174c-4609-9fe1-be6928f27a38",
            "description": "Recipient token"
          },
          "value": {
            "type": "number",
            "example": 70,
            "description": "Split value (percentage or fixed amount)"
          }
        },
        "required": [
          "token",
          "value"
        ]
      },
      "SplitDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PERCENTAGE",
              "FIXED"
            ],
            "example": "PERCENTAGE",
            "description": "Split type"
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SplitRuleDto"
            }
          }
        },
        "required": [
          "type",
          "rules"
        ]
      },
      "CreditCardDto": {
        "type": "object",
        "properties": {
          "installments": {
            "type": "number",
            "example": 1,
            "description": "Number of installments"
          },
          "number": {
            "type": "string",
            "example": "4111111111111111"
          },
          "holder_name": {
            "type": "string",
            "example": "JOAO SILVA"
          },
          "expiry_month": {
            "type": "string",
            "example": "12"
          },
          "expiry_year": {
            "type": "string",
            "example": "2025"
          },
          "cvv": {
            "type": "string",
            "example": "123"
          }
        },
        "required": [
          "installments",
          "number",
          "holder_name",
          "expiry_month",
          "expiry_year",
          "cvv"
        ]
      },
      "BilletDto": {
        "type": "object",
        "properties": {
          "due_date": {
            "type": "string",
            "example": "2025-09-15",
            "description": "Bank slip due date (must be at least 1 day after today)"
          },
          "instructions": {
            "type": "string",
            "example": "Do not receive after due date",
            "description": "Bank slip instructions"
          }
        },
        "required": [
          "due_date"
        ]
      },
      "PixDto": {
        "type": "object",
        "properties": {
          "expiration": {
            "type": "number",
            "example": 3600,
            "description": "Expiration time in seconds"
          }
        },
        "required": [
          "expiration"
        ]
      },
      "CreatePaymentRequestDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "example": 1000,
            "description": "Amount in cents"
          },
          "method": {
            "type": "string",
            "enum": [
              "PIX",
              "CREDIT_CARD",
              "BILLET"
            ],
            "example": "PIX",
            "description": "Payment method"
          },
          "checkout_url": {
            "type": "string",
            "example": "https://checkout.yourstore.com/payment/123",
            "description": "Checkout URL for redirection"
          },
          "referer_url": {
            "type": "string",
            "example": "https://www.yourstore.com/cart",
            "description": "Transaction origin URL"
          },
          "currency": {
            "type": "string",
            "enum": [
              "BRL",
              "MXN",
              "USD"
            ],
            "example": "BRL",
            "description": "Currency"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerDTO"
          },
          "items": {
            "description": "Order items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemDto"
            }
          },
          "address": {
            "$ref": "#/components/schemas/ShippingAddressDto"
          },
          "split": {
            "$ref": "#/components/schemas/SplitDto"
          },
          "credit_card": {
            "description": "Credit card data (required if method = CREDIT_CARD)",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreditCardDto"
              }
            ]
          },
          "billet": {
            "description": "Bank slip data (required if method = BILLET)",
            "allOf": [
              {
                "$ref": "#/components/schemas/BilletDto"
              }
            ]
          },
          "pix": {
            "description": "PIX data (required if method = PIX)",
            "allOf": [
              {
                "$ref": "#/components/schemas/PixDto"
              }
            ]
          },
          "external_id": {
            "type": "string",
            "example": "ORD-123456",
            "description": "External ID from your system"
          },
          "description": {
            "type": "string",
            "example": "Payment for order #123",
            "description": "Payment description"
          }
        },
        "required": [
          "amount",
          "method",
          "currency",
          "customer",
          "items"
        ]
      },
      "PaymentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Payment ID",
            "example": "pay_cm3x7n8f70000vs6g5jkg5hkn"
          },
          "external_id": {
            "type": "object",
            "description": "External payment ID",
            "example": "ext_12345"
          },
          "end_to_end_id": {
            "type": "object",
            "description": "End-to-end ID",
            "example": "E12345678202412345678901234567890"
          },
          "amount": {
            "type": "number",
            "description": "Payment amount in cents",
            "example": 10000
          },
          "status": {
            "type": "string",
            "description": "Payment status",
            "enum": [
              "PENDING",
              "APPROVED",
              "FAILED",
              "REFUNDED",
              "CHARGEDBACK",
              "EXPIRED",
              "REFUSED",
              "IN_DISPUTE",
              "REFUNDED_PROCESSING",
              "ERROR_SYSTEM"
            ]
          },
          "method": {
            "type": "string",
            "description": "Payment method",
            "enum": [
              "PIX",
              "CREDIT_CARD",
              "BILLET"
            ]
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "enum": [
              "BRL",
              "MXN",
              "USD"
            ]
          },
          "description": {
            "type": "object",
            "description": "Payment description",
            "example": "Product purchase"
          },
          "type": {
            "type": "string",
            "description": "Payment type",
            "enum": [
              "ONE_TIME",
              "RECURRENCE"
            ]
          },
          "customer": {
            "type": "object",
            "description": "Customer information"
          },
          "items": {
            "description": "Payment items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemDto"
            }
          },
          "address": {
            "type": "object",
            "description": "Customer address"
          },
          "pix": {
            "type": "object",
            "description": "PIX payment details"
          },
          "billet": {
            "type": "object",
            "description": "Billet payment details"
          },
          "credit_card": {
            "type": "object",
            "description": "Credit card payment details"
          },
          "metadata": {
            "type": "object",
            "description": "Payment metadata"
          },
          "dates": {
            "type": "object",
            "description": "Payment dates"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date",
            "example": "2024-12-23T10:00:00Z"
          }
        },
        "required": [
          "id",
          "amount",
          "status",
          "method",
          "currency",
          "type",
          "customer",
          "items",
          "pix",
          "billet",
          "credit_card",
          "metadata",
          "dates",
          "created_at"
        ]
      },
      "PaymentListResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "List of payments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of payments",
            "example": 150
          },
          "page": {
            "type": "number",
            "description": "Current page",
            "example": 1
          },
          "totalPages": {
            "type": "number",
            "description": "Total number of pages",
            "example": 8
          }
        },
        "required": [
          "data",
          "total",
          "page",
          "totalPages"
        ]
      },
      "UserProfileResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID",
            "example": "usr_cm3x7n8f70000vs6g5jkg5hkn"
          },
          "name": {
            "type": "string",
            "description": "User name",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "User email",
            "example": "john@example.com"
          },
          "document": {
            "type": "object",
            "description": "User document",
            "example": "12345678901",
            "nullable": true
          },
          "type_user": {
            "type": "string",
            "description": "User type",
            "example": "INDIVIDUAL"
          },
          "phone": {
            "type": "string",
            "description": "User phone",
            "example": "+5511999999999"
          },
          "status": {
            "type": "string",
            "description": "User status",
            "example": "ACTIVE"
          },
          "two_fa_enabled": {
            "type": "boolean",
            "description": "Two-factor authentication enabled",
            "example": false
          },
          "has_documents": {
            "type": "boolean",
            "description": "Whether user has uploaded documents",
            "example": true
          },
          "created_at": {
            "type": "string",
            "description": "User creation date",
            "example": "2024-12-23T10:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "description": "User last update date",
            "example": "2024-12-23T10:00:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "type_user",
          "phone",
          "status",
          "two_fa_enabled",
          "has_documents",
          "created_at",
          "updated_at"
        ]
      },
      "UserDocumentDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Document ID",
            "example": "doc_cm3x7n8f70000vs6g5jkg5hkn"
          },
          "document_front_url": {
            "type": "string",
            "description": "Document front image URL",
            "example": "https://s3.amazonaws.com/bucket/document-front.jpg"
          },
          "document_back_url": {
            "type": "string",
            "description": "Document back image URL",
            "example": "https://s3.amazonaws.com/bucket/document-back.jpg"
          },
          "document_selfie_url": {
            "type": "string",
            "description": "Document selfie image URL",
            "example": "https://s3.amazonaws.com/bucket/document-selfie.jpg"
          },
          "uploaded_at": {
            "type": "string",
            "description": "Document upload date",
            "example": "2024-12-23T10:00:00Z"
          }
        },
        "required": [
          "id",
          "document_front_url",
          "document_back_url",
          "document_selfie_url",
          "uploaded_at"
        ]
      },
      "UserDocumentsResponseDto": {
        "type": "object",
        "properties": {
          "documents": {
            "description": "User documents information",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDocumentDto"
              }
            ]
          },
          "message": {
            "type": "string",
            "description": "Response message when no documents are found",
            "example": "No documents uploaded yet"
          }
        }
      },
      "CreateCompanyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Company name",
            "example": "Tech Solutions LTDA",
            "minLength": 2
          },
          "email": {
            "type": "string",
            "description": "Company email address",
            "example": "contact@techsolutions.com"
          },
          "document": {
            "type": "string",
            "description": "Company CNPJ (14 digits)",
            "example": "12345678000195",
            "pattern": "^[0-9]{14}$"
          },
          "address_street": {
            "type": "string",
            "description": "Street address",
            "example": "Rua das Flores, 123"
          },
          "address_street_number": {
            "type": "string",
            "description": "Street number",
            "example": "123"
          },
          "address_cep": {
            "type": "string",
            "description": "ZIP code (8 digits)",
            "example": "01234567",
            "pattern": "^[0-9]{8}$"
          },
          "address_city": {
            "type": "string",
            "description": "City name",
            "example": "São Paulo"
          },
          "address_state": {
            "type": "string",
            "description": "State abbreviation",
            "example": "SP",
            "minLength": 2
          },
          "address_neighborhood": {
            "type": "string",
            "description": "Neighborhood",
            "example": "Centro"
          },
          "soft_descriptor": {
            "type": "string",
            "description": "Soft descriptor for payments",
            "example": "TECHSOL",
            "minLength": 3
          }
        },
        "required": [
          "name",
          "email",
          "document"
        ]
      },
      "CompanyResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "comp_1234567890",
            "description": "Company unique identifier"
          },
          "name": {
            "type": "string",
            "example": "Tech Solutions LTDA",
            "description": "Company name"
          },
          "email": {
            "type": "string",
            "example": "contact@techsolutions.com",
            "description": "Company email"
          },
          "document": {
            "type": "string",
            "example": "12345678000195",
            "description": "Company CNPJ"
          },
          "status": {
            "type": "string",
            "example": "PENDING",
            "description": "Company status"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "document",
          "status",
          "created_at"
        ]
      },
      "DocumentUploadResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Documents uploaded successfully"
          },
          "document": {
            "type": "object",
            "description": "Document information",
            "properties": {
              "id": {
                "type": "string",
                "example": "uuid-document-id"
              },
              "document_front_url": {
                "type": "string",
                "example": "https://s3.amazonaws.com/bucket/front.jpg"
              },
              "document_back_url": {
                "type": "string",
                "example": "https://s3.amazonaws.com/bucket/back.jpg"
              },
              "document_selfie_url": {
                "type": "string",
                "example": "https://s3.amazonaws.com/bucket/selfie.jpg"
              },
              "created_at": {
                "type": "string",
                "example": "2023-01-01T00:00:00.000Z"
              }
            }
          },
          "user_status": {
            "type": "string",
            "description": "Updated user status",
            "example": "ACTIVE"
          }
        },
        "required": [
          "message",
          "document",
          "user_status"
        ]
      },
      "UpdateCompanyTaxConfigDto": {
        "type": "object",
        "properties": {}
      },
      "TaxConfigDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "tax_1234567890"
          },
          "currency": {
            "type": "string",
            "example": "BRL"
          },
          "tax_rate_pix": {
            "type": "number",
            "example": 2.5
          },
          "tax_rate_credit_card": {
            "type": "number",
            "example": 3.5
          },
          "tax_rate_billet": {
            "type": "number",
            "example": 1.5
          },
          "tax_fee_pix": {
            "type": "number",
            "example": 0.5
          },
          "tax_fee_credit_card": {
            "type": "number",
            "example": 0.3
          },
          "tax_fee_billet": {
            "type": "number",
            "example": 2
          },
          "available_days_pix": {
            "type": "number",
            "example": 1
          },
          "available_days_credit_card": {
            "type": "number",
            "example": 30
          },
          "available_days_billet": {
            "type": "number",
            "example": 1
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "currency",
          "tax_rate_pix",
          "tax_rate_credit_card",
          "tax_rate_billet",
          "tax_fee_pix",
          "tax_fee_credit_card",
          "tax_fee_billet",
          "available_days_pix",
          "available_days_credit_card",
          "available_days_billet",
          "created_at",
          "updated_at"
        ]
      },
      "TaxConfigUpdateResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Tax configuration updated successfully"
          },
          "tax_config": {
            "$ref": "#/components/schemas/TaxConfigDto"
          }
        },
        "required": [
          "message",
          "tax_config"
        ]
      },
      "TaxConfigCreateResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Tax configuration created successfully"
          },
          "tax_config": {
            "$ref": "#/components/schemas/TaxConfigDto"
          }
        },
        "required": [
          "message",
          "tax_config"
        ]
      },
      "CompanyConfigDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "config_1234567890"
          },
          "automatic_anticipation_enabled": {
            "type": "boolean",
            "example": true
          },
          "automatic_withdrawal_enabled": {
            "type": "boolean",
            "example": false
          },
          "withdrawal_enabled": {
            "type": "boolean",
            "example": true
          },
          "payment_enabled": {
            "type": "boolean",
            "example": true
          },
          "payment_link_enabled": {
            "type": "boolean",
            "example": true
          },
          "payment_credit_card_enabled": {
            "type": "boolean",
            "example": true
          },
          "payment_pix_enabled": {
            "type": "boolean",
            "example": true
          },
          "payment_billet_enabled": {
            "type": "boolean",
            "example": false
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "automatic_anticipation_enabled",
          "automatic_withdrawal_enabled",
          "withdrawal_enabled",
          "payment_enabled",
          "payment_link_enabled",
          "payment_credit_card_enabled",
          "payment_pix_enabled",
          "payment_billet_enabled",
          "created_at",
          "updated_at"
        ]
      },
      "CompanyConfigResponseDto": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/CompanyConfigDto"
          }
        },
        "required": [
          "config"
        ]
      },
      "UpdateCompanyConfigDto": {
        "type": "object",
        "properties": {}
      },
      "CompanyConfigUpdateResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Company configuration updated successfully"
          },
          "config": {
            "$ref": "#/components/schemas/CompanyConfigDto"
          }
        },
        "required": [
          "message",
          "config"
        ]
      },
      "CompanyConfigCreateResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Company configuration created successfully"
          },
          "config": {
            "$ref": "#/components/schemas/CompanyConfigDto"
          }
        },
        "required": [
          "message",
          "config"
        ]
      },
      "CompanyStatusDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "comp_1234567890"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "ACTIVE",
              "SUSPENDED",
              "BLOCKED"
            ],
            "example": "ACTIVE"
          },
          "verification_status": {
            "type": "string",
            "enum": [
              "PENDING",
              "VERIFIED",
              "REJECTED"
            ],
            "example": "VERIFIED"
          },
          "documents_uploaded": {
            "type": "boolean",
            "example": true
          },
          "kyc_completed": {
            "type": "boolean",
            "example": true
          },
          "can_process_payments": {
            "type": "boolean",
            "example": true
          },
          "can_withdraw": {
            "type": "boolean",
            "example": true
          },
          "last_status_update": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "status",
          "verification_status",
          "documents_uploaded",
          "kyc_completed",
          "can_process_payments",
          "can_withdraw",
          "last_status_update"
        ]
      },
      "CompanyStatusResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/CompanyStatusDto"
          }
        },
        "required": [
          "status"
        ]
      },
      "BalanceAccountTypesDto": {
        "type": "object",
        "properties": {
          "AVAILABLE": {
            "type": "number",
            "example": 15000.5
          },
          "PENDING": {
            "type": "number",
            "example": 2500
          },
          "RESERVED": {
            "type": "number",
            "example": 500
          }
        },
        "required": [
          "AVAILABLE",
          "PENDING",
          "RESERVED"
        ]
      },
      "BalanceItemDto": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "example": "BRL"
          },
          "available": {
            "type": "number",
            "example": 15000.5
          },
          "pending": {
            "type": "number",
            "example": 2500
          },
          "reserved": {
            "type": "number",
            "example": 500
          },
          "total": {
            "type": "number",
            "example": 18000.5
          },
          "account_types": {
            "$ref": "#/components/schemas/BalanceAccountTypesDto"
          }
        },
        "required": [
          "currency",
          "available",
          "pending",
          "reserved",
          "total",
          "account_types"
        ]
      },
      "CompanyBalancesResponseDto": {
        "type": "object",
        "properties": {
          "balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BalanceItemDto"
            }
          }
        },
        "required": [
          "balances"
        ]
      },
      "WalletDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "wallet_1234567890"
          },
          "currency": {
            "type": "string",
            "example": "BRL"
          },
          "account_type": {
            "type": "string",
            "example": "AVAILABLE"
          },
          "balance": {
            "type": "number",
            "example": 15000.5
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "currency",
          "account_type",
          "balance",
          "created_at",
          "updated_at"
        ]
      },
      "WalletsResponseDto": {
        "type": "object",
        "properties": {
          "wallets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletDto"
            }
          }
        },
        "required": [
          "wallets"
        ]
      },
      "CreateApiKeyDto": {
        "type": "object",
        "properties": {
          "write_payment": {
            "type": "boolean",
            "description": "Allow creating payments",
            "default": false
          },
          "read_payment": {
            "type": "boolean",
            "description": "Allow reading payments",
            "default": false
          },
          "refund_payment": {
            "type": "boolean",
            "description": "Allow refunding payments",
            "default": false
          },
          "write_withdrawal": {
            "type": "boolean",
            "description": "Allow creating withdrawals",
            "default": false
          },
          "read_withdrawal": {
            "type": "boolean",
            "description": "Allow reading withdrawals",
            "default": false
          },
          "description": {
            "type": "string",
            "description": "Description of the API key usage",
            "example": "Production API key for payment processing",
            "minLength": 3,
            "maxLength": 255
          }
        },
        "required": [
          "description"
        ]
      },
      "ApiKeyPermissionsDto": {
        "type": "object",
        "properties": {
          "WRITE_PAYMENT": {
            "type": "boolean"
          },
          "READ_PAYMENT": {
            "type": "boolean"
          },
          "REFUND_PAYMENT": {
            "type": "boolean"
          },
          "WRITE_WITHDRAWAL": {
            "type": "boolean"
          },
          "READ_WITHDRAWAL": {
            "type": "boolean"
          }
        },
        "required": [
          "WRITE_PAYMENT",
          "READ_PAYMENT",
          "REFUND_PAYMENT",
          "WRITE_WITHDRAWAL",
          "READ_WITHDRAWAL"
        ]
      },
      "ApiKeyResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "key_1234567890",
            "description": "API key identifier"
          },
          "public_key": {
            "type": "string",
            "example": "pk_live_1234567890abcdef",
            "description": "Public API key (safe to expose)"
          },
          "secret_key": {
            "type": "string",
            "example": "sk_live_abcdef1234567890",
            "description": "Secret API key (keep secure)"
          },
          "description": {
            "type": "string",
            "example": "Production API key for payment processing"
          },
          "permissions": {
            "$ref": "#/components/schemas/ApiKeyPermissionsDto"
          },
          "is_active": {
            "type": "boolean",
            "example": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "public_key",
          "secret_key",
          "description",
          "permissions",
          "is_active",
          "created_at"
        ]
      },
      "ApiKeyListItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "key_1234567890"
          },
          "public_key": {
            "type": "string",
            "example": "pk_live_1234567890abcdef"
          },
          "secret_key": {
            "type": "string",
            "example": "sk_live_****...****7890",
            "description": "Masked for security"
          },
          "description": {
            "type": "string",
            "example": "Production API key for payment processing"
          },
          "permissions": {
            "$ref": "#/components/schemas/ApiKeyPermissionsDto"
          },
          "is_active": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "id",
          "public_key",
          "secret_key",
          "description",
          "permissions",
          "is_active",
          "created_at",
          "last_used_at"
        ]
      },
      "ApiKeyDetailsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "key_1234567890"
          },
          "public_key": {
            "type": "string",
            "example": "pk_live_1234567890abcdef"
          },
          "secret_key": {
            "type": "string",
            "example": "sk_live_****...****7890",
            "description": "Masked for security"
          },
          "description": {
            "type": "string",
            "example": "Production API key for payment processing"
          },
          "permissions": {
            "$ref": "#/components/schemas/ApiKeyPermissionsDto"
          },
          "is_active": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "usage_stats": {
            "type": "object",
            "properties": {
              "total_requests": {
                "type": "number",
                "example": 1250
              },
              "last_30_days": {
                "type": "number",
                "example": 89
              }
            }
          }
        },
        "required": [
          "id",
          "public_key",
          "secret_key",
          "description",
          "permissions",
          "is_active",
          "created_at",
          "last_used_at",
          "usage_stats"
        ]
      },
      "UpdateApiKeyDto": {
        "type": "object",
        "properties": {
          "write_payment": {
            "type": "boolean",
            "description": "Allow creating payments",
            "default": false
          },
          "read_payment": {
            "type": "boolean",
            "description": "Allow reading payments",
            "default": false
          },
          "refund_payment": {
            "type": "boolean",
            "description": "Allow refunding payments",
            "default": false
          },
          "write_withdrawal": {
            "type": "boolean",
            "description": "Allow creating withdrawals",
            "default": false
          },
          "read_withdrawal": {
            "type": "boolean",
            "description": "Allow reading withdrawals",
            "default": false
          },
          "description": {
            "type": "string",
            "description": "Description of the API key usage",
            "minLength": 3,
            "maxLength": 255
          }
        }
      },
      "ApiKeyUpdateResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "key_1234567890"
          },
          "public_key": {
            "type": "string",
            "example": "pk_live_1234567890abcdef"
          },
          "secret_key": {
            "type": "string",
            "example": "sk_live_****...****7890",
            "description": "Masked for security"
          },
          "description": {
            "type": "string",
            "example": "Updated API key description"
          },
          "permissions": {
            "$ref": "#/components/schemas/ApiKeyPermissionsDto"
          },
          "is_active": {
            "type": "boolean"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "public_key",
          "secret_key",
          "description",
          "permissions",
          "is_active",
          "updated_at"
        ]
      },
      "ValidateApiKeyDto": {
        "type": "object",
        "properties": {
          "public_key": {
            "type": "string",
            "description": "Public API key",
            "example": "pk_test_..."
          },
          "secret_key": {
            "type": "string",
            "description": "Secret API key",
            "example": "sk_test_..."
          }
        },
        "required": [
          "public_key",
          "secret_key"
        ]
      },
      "ApiKeyValidationDto": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean",
            "example": true
          },
          "api_key": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "key_1234567890"
              },
              "public_key": {
                "type": "string",
                "example": "pk_live_1234567890abcdef"
              },
              "description": {
                "type": "string",
                "example": "Production API key"
              },
              "permissions": {},
              "company_id": {
                "type": "string",
                "example": "comp_1234567890"
              },
              "is_active": {
                "type": "boolean",
                "example": true
              }
            }
          }
        },
        "required": [
          "valid",
          "api_key"
        ]
      },
      "ApiKeyRegenerateResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "key_1234567890"
          },
          "public_key": {
            "type": "string",
            "example": "pk_live_newkey1234567890",
            "description": "New public key"
          },
          "secret_key": {
            "type": "string",
            "example": "sk_live_newsecret1234567890",
            "description": "New secret key (store securely)"
          },
          "description": {
            "type": "string",
            "example": "Production API key"
          },
          "permissions": {
            "$ref": "#/components/schemas/ApiKeyPermissionsDto"
          },
          "is_active": {
            "type": "boolean",
            "example": true
          },
          "regenerated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "public_key",
          "secret_key",
          "description",
          "permissions",
          "is_active",
          "regenerated_at"
        ]
      },
      "CreateProviderDto": {
        "type": "object",
        "properties": {}
      },
      "ProviderResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Provider ID",
            "example": "prv_cm3x7n8f70000vs6g5jkg5hkn"
          },
          "name": {
            "type": "string",
            "description": "Provider name",
            "enum": [
              "AXIS_BANKING"
            ],
            "example": "STRIPE"
          },
          "type": {
            "type": "string",
            "description": "Provider type",
            "enum": [
              "CRIPTO",
              "FIAT",
              "FIAT_CRIPTO"
            ],
            "example": "PAYMENT_GATEWAY"
          },
          "status": {
            "type": "string",
            "description": "Provider status",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "example": "ACTIVE"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date",
            "example": "2024-12-23T10:00:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "status",
          "created_at"
        ]
      },
      "ProviderDetailsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Provider ID",
            "example": "prv_cm3x7n8f70000vs6g5jkg5hkn"
          },
          "name": {
            "type": "string",
            "description": "Provider name",
            "enum": [
              "AXIS_BANKING"
            ],
            "example": "STRIPE"
          },
          "type": {
            "type": "string",
            "description": "Provider type",
            "enum": [
              "CRIPTO",
              "FIAT",
              "FIAT_CRIPTO"
            ],
            "example": "PAYMENT_GATEWAY"
          },
          "status": {
            "type": "string",
            "description": "Provider status",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "example": "ACTIVE"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date",
            "example": "2024-12-23T10:00:00Z"
          },
          "model": {
            "type": "string",
            "description": "Provider model",
            "enum": [
              "BAG",
              "SUB_ACCOUNT"
            ]
          },
          "environment": {
            "type": "string",
            "description": "Provider environment",
            "enum": [
              "SANDBOX",
              "PRODUCTION"
            ]
          },
          "mode": {
            "type": "string",
            "description": "Provider mode",
            "enum": [
              "CASHIN",
              "CASHOUT",
              "CASHIN_CASHOUT"
            ]
          },
          "description": {
            "type": "string",
            "description": "Provider description",
            "example": "Stripe payment gateway integration"
          },
          "configuration": {
            "type": "object",
            "description": "Provider configuration",
            "additionalProperties": false
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update date",
            "example": "2024-12-23T10:00:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "status",
          "created_at",
          "model",
          "environment",
          "mode",
          "updated_at"
        ]
      },
      "UpdateProviderDto": {
        "type": "object",
        "properties": {}
      },
      "ProviderUpdateResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Provider updated successfully"
          },
          "provider": {
            "type": "object",
            "description": "Updated provider information",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        },
        "required": [
          "message",
          "provider"
        ]
      },
      "CreateProviderTaxConfigDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateProviderTaxConfigDto": {
        "type": "object",
        "properties": {}
      },
      "CreateSubAccountDto": {
        "type": "object",
        "properties": {}
      },
      "AssignProviderToCompanyDto": {
        "type": "object",
        "properties": {}
      },
      "CreateReceiverDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "BANK_ACCOUNT",
              "CRIPTO_WALLET"
            ],
            "example": "BANK_ACCOUNT",
            "description": "Tipo do recebedor"
          },
          "bank_holder_name": {
            "type": "string",
            "example": "João da Silva"
          },
          "bank_holder_type": {
            "type": "string",
            "enum": [
              "INDIVIDUAL",
              "COMPANY"
            ],
            "example": "INDIVIDUAL"
          },
          "bank_holder_document": {
            "type": "string",
            "example": "12345678900"
          },
          "bank_code": {
            "type": "string",
            "example": "341"
          },
          "bank_name": {
            "type": "string",
            "example": "Itaú Unibanco"
          },
          "bank_branch_code": {
            "type": "string",
            "example": "0001"
          },
          "bank_branch_check_digit": {
            "type": "string",
            "example": "0"
          },
          "bank_account_number": {
            "type": "string",
            "example": "12345"
          },
          "bank_account_check_digit": {
            "type": "string",
            "example": "6"
          },
          "bank_account_type": {
            "type": "string",
            "enum": [
              "CHECKING",
              "SAVINGS",
              "PAYMENT"
            ],
            "example": "CHECKING"
          },
          "pix_key": {
            "type": "string",
            "example": "joao@email.com"
          },
          "pix_type": {
            "type": "string",
            "enum": [
              "CPF",
              "CNPJ",
              "EMAIL",
              "PHONE",
              "RANDOM"
            ],
            "example": "EMAIL"
          },
          "wallet_network": {
            "type": "string",
            "enum": [
              "ETHEREUM",
              "BITCOIN",
              "POLYGON",
              "BSC",
              "ARBITRUM",
              "OPTIMISM",
              "AVALANCHE",
              "SOLANA",
              "TRON"
            ],
            "example": "ETHEREUM"
          },
          "wallet_id": {
            "type": "string",
            "example": "0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb"
          }
        },
        "required": [
          "type"
        ]
      },
      "ReceiverResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Receiver ID",
            "example": "rcv_cm3x7n8f70000vs6g5jkg5hkn"
          },
          "name": {
            "type": "string",
            "description": "Receiver name",
            "example": "John Doe"
          },
          "document": {
            "type": "string",
            "description": "Receiver document",
            "example": "12345678901"
          },
          "email": {
            "type": "string",
            "description": "Receiver email",
            "example": "john@example.com"
          },
          "status": {
            "type": "string",
            "description": "Receiver status",
            "enum": [
              "ACTIVE",
              "PENDING",
              "REJECTED"
            ]
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date",
            "example": "2024-12-23T10:00:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "document",
          "email",
          "status",
          "created_at"
        ]
      },
      "ReceiverListResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "List of receivers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReceiverResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of receivers",
            "example": 150
          },
          "page": {
            "type": "number",
            "description": "Current page",
            "example": 1
          },
          "totalPages": {
            "type": "number",
            "description": "Total number of pages",
            "example": 8
          }
        },
        "required": [
          "data",
          "total",
          "page",
          "totalPages"
        ]
      },
      "ReceiverDetailsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Receiver ID",
            "example": "rcv_cm3x7n8f70000vs6g5jkg5hkn"
          },
          "name": {
            "type": "string",
            "description": "Receiver name",
            "example": "John Doe"
          },
          "document": {
            "type": "string",
            "description": "Receiver document",
            "example": "12345678901"
          },
          "email": {
            "type": "string",
            "description": "Receiver email",
            "example": "john@example.com"
          },
          "status": {
            "type": "string",
            "description": "Receiver status",
            "enum": [
              "ACTIVE",
              "PENDING",
              "REJECTED"
            ]
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date",
            "example": "2024-12-23T10:00:00Z"
          },
          "phone": {
            "type": "string",
            "description": "Receiver phone",
            "example": "+5511999999999"
          },
          "bank_account": {
            "type": "object",
            "description": "Bank account information",
            "properties": {
              "bank_code": {
                "type": "string",
                "example": "001"
              },
              "agency": {
                "type": "string",
                "example": "1234"
              },
              "account": {
                "type": "string",
                "example": "12345-6"
              },
              "account_type": {
                "type": "string",
                "example": "CHECKING"
              }
            }
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update date",
            "example": "2024-12-23T10:00:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "document",
          "email",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateReceiverStatusDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "REJECTED"
            ],
            "example": "ACTIVE",
            "description": "Novo status do recebedor"
          }
        },
        "required": [
          "status"
        ]
      },
      "ReceiverStatusUpdateResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Receiver status updated successfully"
          },
          "receiver": {
            "type": "object",
            "description": "Updated receiver information",
            "properties": {
              "id": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "PENDING",
                  "REJECTED"
                ]
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        },
        "required": [
          "message",
          "receiver"
        ]
      },
      "CreateWithdrawalDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "example": 1000,
            "description": "Valor em centavos"
          },
          "receiver_id": {
            "type": "string",
            "example": "uuid-do-receiver",
            "description": "ID do recebedor cadastrado"
          },
          "type": {
            "type": "string",
            "enum": [
              "CRIPTO_WALLET",
              "PIX",
              "BANK_ACCOUNT"
            ],
            "example": "PIX",
            "description": "Tipo de saque"
          },
          "external_id": {
            "type": "string",
            "example": "WTH-123456",
            "description": "ID externo do seu sistema"
          }
        },
        "required": [
          "amount",
          "receiver_id",
          "type"
        ]
      },
      "WithdrawalResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Withdrawal ID",
            "example": "wth_cm3x7n8f70000vs6g5jkg5hkn"
          },
          "external_id": {
            "type": "string",
            "description": "External withdrawal ID",
            "example": "ext_withdrawal_123456"
          },
          "end_to_end": {
            "type": "string",
            "description": "End-to-end withdrawal ID",
            "example": "E12345678202412231000000001"
          },
          "amount": {
            "type": "number",
            "description": "Withdrawal amount in cents",
            "example": 10000
          },
          "status": {
            "type": "string",
            "description": "Withdrawal status",
            "example": "PENDING",
            "enum": [
              "PENDING",
              "PROCESSING",
              "COMPLETED",
              "FAILED",
              "CANCELLED"
            ]
          },
          "description": {
            "type": "string",
            "description": "Withdrawal description",
            "example": "Payment for services"
          },
          "receiver": {
            "type": "object",
            "description": "Receiver information",
            "properties": {
              "id": {
                "type": "string",
                "example": "rcv_cm3x7n8f70000vs6g5jkg5hkn"
              },
              "name": {
                "type": "string",
                "example": "John Doe"
              },
              "document": {
                "type": "string",
                "example": "12345678901"
              }
            }
          },
          "created_at": {
            "type": "string",
            "description": "Withdrawal creation date",
            "example": "2024-12-23T10:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Withdrawal last update date",
            "example": "2024-12-23T10:00:00Z"
          }
        },
        "required": [
          "id",
          "external_id",
          "end_to_end",
          "amount",
          "status",
          "description",
          "created_at",
          "updated_at"
        ]
      },
      "WithdrawalCreatedResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Withdrawal created successfully"
          },
          "withdrawal": {
            "description": "Created withdrawal information",
            "allOf": [
              {
                "$ref": "#/components/schemas/WithdrawalResponseDto"
              }
            ]
          }
        },
        "required": [
          "message",
          "withdrawal"
        ]
      },
      "WithdrawalListResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "List of withdrawals",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WithdrawalResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of withdrawals",
            "example": 150
          },
          "page": {
            "type": "number",
            "description": "Current page",
            "example": 1
          },
          "totalPages": {
            "type": "number",
            "description": "Total number of pages",
            "example": 8
          },
          "limit": {
            "type": "number",
            "description": "Items per page",
            "example": 20
          }
        },
        "required": [
          "data",
          "total",
          "page",
          "totalPages",
          "limit"
        ]
      },
      "WithdrawalDetailsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Withdrawal ID",
            "example": "wth_cm3x7n8f70000vs6g5jkg5hkn"
          },
          "external_id": {
            "type": "string",
            "description": "External withdrawal ID",
            "example": "ext_withdrawal_123456"
          },
          "end_to_end": {
            "type": "string",
            "description": "End-to-end withdrawal ID",
            "example": "E12345678202412231000000001"
          },
          "amount": {
            "type": "number",
            "description": "Withdrawal amount in cents",
            "example": 10000
          },
          "status": {
            "type": "string",
            "description": "Withdrawal status",
            "example": "PENDING",
            "enum": [
              "PENDING",
              "PROCESSING",
              "COMPLETED",
              "FAILED",
              "CANCELLED"
            ]
          },
          "description": {
            "type": "string",
            "description": "Withdrawal description",
            "example": "Payment for services"
          },
          "receiver": {
            "type": "object",
            "description": "Receiver information",
            "properties": {
              "id": {
                "type": "string",
                "example": "rcv_cm3x7n8f70000vs6g5jkg5hkn"
              },
              "name": {
                "type": "string",
                "example": "John Doe"
              },
              "document": {
                "type": "string",
                "example": "12345678901"
              }
            }
          },
          "created_at": {
            "type": "string",
            "description": "Withdrawal creation date",
            "example": "2024-12-23T10:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Withdrawal last update date",
            "example": "2024-12-23T10:00:00Z"
          },
          "fees": {
            "type": "object",
            "description": "Transaction fees",
            "properties": {
              "platform_fee": {
                "type": "number",
                "example": 100
              },
              "gateway_fee": {
                "type": "number",
                "example": 50
              },
              "total_fee": {
                "type": "number",
                "example": 150
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "Request metadata",
            "properties": {
              "ip_address": {
                "type": "string",
                "example": "192.168.1.1"
              },
              "user_agent": {
                "type": "string",
                "example": "Mozilla/5.0..."
              },
              "referer": {
                "type": "string",
                "example": "https://example.com"
              }
            }
          }
        },
        "required": [
          "id",
          "external_id",
          "end_to_end",
          "amount",
          "status",
          "description",
          "created_at",
          "updated_at"
        ]
      },
      "ScheduleItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "schedule_123"
          },
          "amount": {
            "type": "number",
            "example": 1000.5
          },
          "payment_date": {
            "type": "string",
            "format": "date-time"
          },
          "payment_id": {
            "type": "string",
            "example": "payment_456"
          },
          "installment_number": {
            "type": "number",
            "example": 1
          }
        },
        "required": [
          "id",
          "amount",
          "payment_date",
          "payment_id"
        ]
      },
      "AvailableSchedulesDto": {
        "type": "object",
        "properties": {
          "INSTALLMENT": {
            "description": "Available installment schedules",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleItemDto"
            }
          },
          "PENDING_TO_AVAILABLE": {
            "description": "Available pending to available schedules",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleItemDto"
            }
          }
        },
        "required": [
          "INSTALLMENT",
          "PENDING_TO_AVAILABLE"
        ]
      },
      "SimulateAnticipationDto": {
        "type": "object",
        "properties": {
          "scheduleType": {
            "type": "string",
            "enum": [
              "INSTALLMENT",
              "PENDING_TO_AVAILABLE"
            ],
            "example": "INSTALLMENT",
            "description": "Type of schedule to simulate"
          },
          "currency": {
            "type": "string",
            "enum": [
              "BRL",
              "MXN",
              "USD"
            ],
            "example": "BRL",
            "description": "Type of schedule to simulate"
          }
        },
        "required": [
          "scheduleType",
          "currency"
        ]
      },
      "AnticipationSimulationDto": {
        "type": "object",
        "properties": {
          "total_amount": {
            "type": "number",
            "example": 1000,
            "description": "Total amount to be anticipated"
          },
          "amount_net": {
            "type": "number",
            "example": 950,
            "description": "Net amount after fees"
          },
          "amount_organization": {
            "type": "number",
            "example": 50,
            "description": "Organization fee amount"
          },
          "tax": {
            "type": "number",
            "example": 5,
            "description": "Tax percentage applied"
          },
          "fee": {
            "type": "number",
            "example": 50,
            "description": "Fixed fee amount"
          },
          "currency": {
            "type": "string",
            "example": "BRL",
            "description": "Currency of the amounts"
          },
          "schedules_count": {
            "type": "number",
            "example": 3,
            "description": "Number of schedules included"
          },
          "estimated_date": {
            "type": "string",
            "format": "date-time",
            "description": "Estimated processing date"
          }
        },
        "required": [
          "total_amount",
          "amount_net",
          "amount_organization",
          "tax",
          "fee",
          "currency",
          "schedules_count",
          "estimated_date"
        ]
      },
      "CreateAnticipationDto": {
        "type": "object",
        "properties": {
          "scheduleType": {
            "type": "string",
            "enum": [
              "INSTALLMENT",
              "PENDING_TO_AVAILABLE"
            ],
            "example": "INSTALLMENT",
            "description": "Type of schedule to simulate"
          },
          "currency": {
            "type": "string",
            "enum": [
              "BRL",
              "MXN",
              "USD"
            ],
            "example": "BRL",
            "description": "Type of schedule to simulate"
          }
        },
        "required": [
          "scheduleType",
          "currency"
        ]
      },
      "AnticipationResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "ant_1234567890",
            "description": "Unique anticipation identifier"
          },
          "amount_net": {
            "type": "number",
            "example": 950,
            "description": "Net amount transferred to available balance"
          },
          "amount_organization": {
            "type": "number",
            "example": 50,
            "description": "Organization fee charged"
          },
          "total_amount": {
            "type": "number",
            "example": 1000,
            "description": "Total amount anticipated"
          },
          "tax": {
            "type": "number",
            "example": 5,
            "description": "Tax percentage applied"
          },
          "fee": {
            "type": "number",
            "example": 50,
            "description": "Fixed fee amount"
          },
          "currency": {
            "type": "string",
            "example": "BRL",
            "description": "Currency of the amounts"
          },
          "type": {
            "type": "string",
            "example": "INSTALLMENT",
            "description": "Type of anticipation"
          },
          "group_payments_id": {
            "type": "string",
            "example": "group_789",
            "description": "Payment group identifier"
          },
          "company_id": {
            "type": "string",
            "example": "comp_456",
            "description": "Company identifier"
          },
          "payments_ids": {
            "example": [
              "pay_123",
              "pay_456"
            ],
            "description": "List of payment IDs included in anticipation",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "example": "PENDING",
            "description": "Current anticipation status"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          }
        },
        "required": [
          "id",
          "amount_net",
          "amount_organization",
          "total_amount",
          "tax",
          "fee",
          "currency",
          "type",
          "group_payments_id",
          "company_id",
          "payments_ids",
          "status",
          "created_at"
        ]
      },
      "AnticipationListItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "ant_1234567890"
          },
          "amount_net": {
            "type": "number",
            "example": 950
          },
          "amount_organization": {
            "type": "number",
            "example": 50
          },
          "total_amount": {
            "type": "number",
            "example": 1000
          },
          "tax": {
            "type": "number",
            "example": 5
          },
          "fee": {
            "type": "number",
            "example": 50
          },
          "currency": {
            "type": "string",
            "example": "BRL"
          },
          "type": {
            "type": "string",
            "example": "INSTALLMENT"
          },
          "status": {
            "type": "string",
            "example": "APPROVED"
          },
          "group_payments_id": {
            "type": "string",
            "example": "group_789"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "amount_net",
          "amount_organization",
          "total_amount",
          "tax",
          "fee",
          "currency",
          "type",
          "status",
          "group_payments_id",
          "created_at",
          "updated_at"
        ]
      },
      "PaginationDto": {
        "type": "object",
        "properties": {
          "page": {
            "type": "number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "example": 20
          },
          "total": {
            "type": "number",
            "example": 150
          },
          "total_pages": {
            "type": "number",
            "example": 8
          }
        },
        "required": [
          "page",
          "limit",
          "total",
          "total_pages"
        ]
      },
      "AnticipationListResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnticipationListItemDto"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationDto"
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "InviteUserToCompanyDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email of the user to invite",
            "example": "user@example.com"
          },
          "type": {
            "type": "string",
            "description": "Type of access",
            "enum": [
              "OWNED",
              "GUEST"
            ],
            "default": "GUEST"
          },
          "read_payment": {
            "type": "boolean",
            "description": "Permission to read payments",
            "default": false
          },
          "write_payment": {
            "type": "boolean",
            "description": "Permission to write payments",
            "default": false
          },
          "read_withdrawal": {
            "type": "boolean",
            "description": "Permission to read withdrawals",
            "default": false
          },
          "write_withdrawal": {
            "type": "boolean",
            "description": "Permission to write withdrawals",
            "default": false
          }
        },
        "required": [
          "email",
          "type"
        ]
      },
      "InviteUserResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Invitation sent successfully"
          },
          "invitation": {
            "type": "object",
            "description": "Invitation details"
          }
        },
        "required": [
          "message",
          "invitation"
        ]
      },
      "AcceptInviteDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Invitation token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        },
        "required": [
          "token"
        ]
      },
      "AcceptInviteResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Invitation accepted successfully"
          },
          "access": {
            "type": "object",
            "description": "Company access details"
          }
        },
        "required": [
          "message",
          "access"
        ]
      },
      "CompanyMemberDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Member access ID",
            "example": "luc_cm3x7n8f70000vs6g5jkg5hkn"
          },
          "user_id": {
            "type": "string",
            "description": "User ID",
            "example": "usr_cm3x7n8f70000vs6g5jkg5hkn"
          },
          "company_id": {
            "type": "string",
            "description": "Company ID",
            "example": "cmp_cm3x7n8f70000vs6g5jkg5hkn"
          },
          "type": {
            "type": "string",
            "description": "Access type",
            "enum": [
              "OWNED",
              "GUEST"
            ]
          },
          "read_payment": {
            "type": "boolean",
            "description": "Permission to read payments",
            "example": true
          },
          "write_payment": {
            "type": "boolean",
            "description": "Permission to write payments",
            "example": false
          },
          "read_withdrawal": {
            "type": "boolean",
            "description": "Permission to read withdrawals",
            "example": true
          },
          "write_withdrawal": {
            "type": "boolean",
            "description": "Permission to write withdrawals",
            "example": false
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date",
            "example": "2024-12-23T10:00:00Z"
          },
          "banned_at": {
            "type": "object",
            "description": "Ban date if member is banned",
            "example": null
          },
          "user": {
            "type": "object",
            "description": "User information"
          }
        },
        "required": [
          "id",
          "user_id",
          "company_id",
          "type",
          "read_payment",
          "write_payment",
          "read_withdrawal",
          "write_withdrawal",
          "created_at",
          "user"
        ]
      },
      "CompanyMemberListResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "List of company members",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyMemberDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of members",
            "example": 25
          },
          "page": {
            "type": "number",
            "description": "Current page",
            "example": 1
          },
          "last_page": {
            "type": "number",
            "description": "Last page number",
            "example": 3
          }
        },
        "required": [
          "data",
          "total",
          "page",
          "last_page"
        ]
      },
      "CompanyAccessSummaryDto": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string",
            "description": "Company ID",
            "example": "cmp_cm3x7n8f70000vs6g5jkg5hkn"
          },
          "total_members": {
            "type": "number",
            "description": "Total number of members",
            "example": 25
          },
          "owners": {
            "type": "number",
            "description": "Number of owners",
            "example": 2
          },
          "guests": {
            "type": "number",
            "description": "Number of guests",
            "example": 23
          },
          "pending_invitations": {
            "type": "number",
            "description": "Number of pending invitations",
            "example": 3
          },
          "banned_members": {
            "type": "number",
            "description": "Number of banned members",
            "example": 1
          }
        },
        "required": [
          "company_id",
          "total_members",
          "owners",
          "guests",
          "pending_invitations",
          "banned_members"
        ]
      },
      "UpdateUserPermissionsDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of access",
            "enum": [
              "OWNED",
              "GUEST"
            ]
          },
          "read_payment": {
            "type": "boolean",
            "description": "Permission to read payments"
          },
          "write_payment": {
            "type": "boolean",
            "description": "Permission to write payments"
          },
          "read_withdrawal": {
            "type": "boolean",
            "description": "Permission to read withdrawals"
          },
          "write_withdrawal": {
            "type": "boolean",
            "description": "Permission to write withdrawals"
          }
        }
      },
      "MemberActionResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message"
          },
          "member": {
            "description": "Updated member information",
            "allOf": [
              {
                "$ref": "#/components/schemas/CompanyMemberDto"
              }
            ]
          }
        },
        "required": [
          "message",
          "member"
        ]
      },
      "MessageResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "Operation completed successfully"
          }
        },
        "required": [
          "message"
        ]
      },
      "UserCompanyDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Access ID",
            "example": "luc_cm3x7n8f70000vs6g5jkg5hkn"
          },
          "company_id": {
            "type": "string",
            "description": "Company ID",
            "example": "cmp_cm3x7n8f70000vs6g5jkg5hkn"
          },
          "type": {
            "type": "string",
            "description": "Access type",
            "enum": [
              "OWNED",
              "GUEST"
            ]
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date",
            "example": "2024-12-23T10:00:00Z"
          },
          "company": {
            "type": "object",
            "description": "Company information"
          }
        },
        "required": [
          "id",
          "company_id",
          "type",
          "created_at",
          "company"
        ]
      },
      "UserCompanyListResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "List of user companies",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserCompanyDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of companies",
            "example": 5
          }
        },
        "required": [
          "data",
          "total"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User full name",
            "example": "John Doe",
            "minLength": 2
          },
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "User password (must contain uppercase, lowercase, number/special character)",
            "example": "Password123!",
            "minLength": 8
          },
          "phone": {
            "type": "string",
            "description": "User phone number in international format",
            "example": "+5511999999999"
          },
          "document": {
            "type": "string",
            "description": "User document (11 digits for CPF or 14 digits for CNPJ)",
            "example": "12345678901"
          },
          "type_user": {
            "type": "string",
            "description": "User type",
            "enum": [
              "CPF",
              "CNPJ"
            ],
            "example": "INDIVIDUAL"
          }
        },
        "required": [
          "name",
          "email",
          "password",
          "phone",
          "document"
        ]
      },
      "UserRegistrationResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID",
            "example": "uuid-user-id"
          },
          "name": {
            "type": "string",
            "description": "User name",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "User email",
            "example": "user@example.com"
          },
          "status": {
            "type": "string",
            "description": "User status",
            "example": "PENDING_VERIFICATION"
          },
          "type_user": {
            "type": "string",
            "description": "User type",
            "example": "INDIVIDUAL"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2023-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "status",
          "type_user",
          "created_at"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "example": "Password123!"
          },
          "company_id": {
            "type": "string",
            "description": "Optional company ID to select on login",
            "example": "uuid-company-id"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "LoginResponseDto": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "JWT access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "refresh_token": {
            "type": "string",
            "description": "JWT refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "user": {
            "type": "object",
            "description": "User information",
            "properties": {
              "id": {
                "type": "string",
                "example": "uuid-user-id"
              },
              "email": {
                "type": "string",
                "example": "user@example.com"
              },
              "name": {
                "type": "string",
                "example": "John Doe"
              },
              "companies": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "uuid-company-id"
                    },
                    "name": {
                      "type": "string",
                      "example": "Company Name"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "OWNED",
                        "GUEST"
                      ],
                      "example": "OWNED"
                    }
                  }
                }
              }
            }
          },
          "expires_in": {
            "type": "number",
            "description": "Token expiration time in seconds",
            "example": 3600
          }
        },
        "required": [
          "access_token",
          "refresh_token",
          "user",
          "expires_in"
        ]
      },
      "RefreshTokenDto": {
        "type": "object",
        "properties": {
          "refresh_token": {
            "type": "string",
            "description": "Refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        },
        "required": [
          "refresh_token"
        ]
      },
      "LogoutDto": {
        "type": "object",
        "properties": {
          "refresh_token": {
            "type": "string",
            "description": "Optional refresh token to invalidate",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        }
      },
      "AuthenticatedUserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID",
            "example": "uuid-user-id"
          },
          "email": {
            "type": "string",
            "description": "User email",
            "example": "user@example.com"
          },
          "name": {
            "type": "string",
            "description": "User name",
            "example": "John Doe"
          },
          "document": {
            "type": "string",
            "description": "User document",
            "example": "12345678901"
          },
          "avatar_url": {
            "type": "string",
            "description": "User avatar URL",
            "example": "https://example.com/avatar.jpg"
          },
          "companies": {
            "type": "array",
            "description": "User companies",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "uuid-company-id"
                },
                "name": {
                  "type": "string",
                  "example": "Company Name"
                },
                "document": {
                  "type": "string",
                  "example": "12345678000195"
                },
                "status": {
                  "type": "string",
                  "example": "ACTIVE"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "OWNED",
                    "GUEST"
                  ],
                  "example": "OWNED"
                },
                "permissions": {
                  "type": "object",
                  "properties": {
                    "read_payment": {
                      "type": "boolean",
                      "example": true
                    },
                    "write_payment": {
                      "type": "boolean",
                      "example": true
                    },
                    "read_withdrawal": {
                      "type": "boolean",
                      "example": true
                    },
                    "write_withdrawal": {
                      "type": "boolean",
                      "example": false
                    }
                  }
                }
              }
            }
          },
          "selected_company_id": {
            "type": "string",
            "description": "Selected company ID",
            "example": "uuid-company-id"
          },
          "selected_company": {
            "type": "object",
            "description": "Selected company details",
            "properties": {
              "id": {
                "type": "string",
                "example": "uuid-company-id"
              },
              "name": {
                "type": "string",
                "example": "Company Name"
              },
              "document": {
                "type": "string",
                "example": "12345678000195"
              },
              "status": {
                "type": "string",
                "example": "ACTIVE"
              },
              "type": {
                "type": "string",
                "enum": [
                  "OWNED",
                  "GUEST"
                ],
                "example": "OWNED"
              }
            }
          }
        },
        "required": [
          "id",
          "email",
          "name"
        ]
      },
      "ChangePasswordDto": {
        "type": "object",
        "properties": {
          "current_password": {
            "type": "string",
            "description": "Current password",
            "example": "OldPassword123!"
          },
          "new_password": {
            "type": "string",
            "description": "New password",
            "example": "NewPassword123!",
            "minLength": 8
          }
        },
        "required": [
          "current_password",
          "new_password"
        ]
      },
      "ForgotPasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email for password reset",
            "example": "user@example.com"
          }
        },
        "required": [
          "email"
        ]
      },
      "ResetPasswordDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Password reset token",
            "example": "reset-token-from-email"
          },
          "new_password": {
            "type": "string",
            "description": "New password",
            "example": "NewPassword123!",
            "minLength": 8
          }
        },
        "required": [
          "token",
          "new_password"
        ]
      },
      "VerifyTokenDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token to verify",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        },
        "required": [
          "token"
        ]
      },
      "VerifyTokenResponseDto": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "Whether the token is valid",
            "example": true
          },
          "payload": {
            "type": "object",
            "description": "Token payload if valid",
            "properties": {
              "sub": {
                "type": "string",
                "example": "uuid-user-id"
              },
              "email": {
                "type": "string",
                "example": "user@example.com"
              },
              "type": {
                "type": "string",
                "example": "access"
              },
              "iat": {
                "type": "number",
                "example": 1640995200
              },
              "exp": {
                "type": "number",
                "example": 1640998800
              }
            }
          }
        },
        "required": [
          "valid"
        ]
      },
      "SelectCompanyDto": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string",
            "description": "Company ID to select",
            "example": "uuid-company-id"
          }
        },
        "required": [
          "company_id"
        ]
      },
      "SelectCompanyResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Company selected successfully"
          },
          "company": {
            "type": "object",
            "description": "Selected company details",
            "properties": {
              "id": {
                "type": "string",
                "example": "uuid-company-id"
              },
              "name": {
                "type": "string",
                "example": "Company Name"
              },
              "type": {
                "type": "string",
                "enum": [
                  "OWNED",
                  "GUEST"
                ],
                "example": "OWNED"
              },
              "permissions": {
                "type": "object",
                "properties": {
                  "read_payment": {
                    "type": "boolean",
                    "example": true
                  },
                  "write_payment": {
                    "type": "boolean",
                    "example": true
                  },
                  "read_withdrawal": {
                    "type": "boolean",
                    "example": true
                  },
                  "write_withdrawal": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "required": [
          "message",
          "company"
        ]
      }
    }
  }
}